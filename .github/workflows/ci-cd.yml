# Este workflow implementa CI/CD completo para o projeto Desafio Lacrei
# Inclui lint, testes, build Docker e deploy para produção
#
# Secrets necessários no GitHub:
# AWS_ACCESS_KEY_ID - Chave de acesso AWS
# AWS_SECRET_ACCESS_KEY - Chave secreta AWS  
# AWS_REGION - Região AWS (ex: us-east-1)
# AWS_ACCOUNT_ID - ID da conta AWS
# AWS_SUBNET_1 - ID da primeira subnet privada
# AWS_SUBNET_2 - ID da segunda subnet privada
# AWS_SECURITY_GROUP - ID do security group

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  packages: write

env:
  PYTHON_VERSION: "3.11"

jobs:
  lint:
    name: 🔍 Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      id: setup-python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1.4.1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    
    - name: Install project
      run: poetry install --no-interaction --no-root
    
    - name: Run flake8
      run: |
        poetry add --group dev flake8
        poetry run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        poetry run flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run black check
      run: |
        poetry add --group dev black
        poetry run black --check --diff .
    
    - name: Run isort check
      run: |
        poetry add --group dev isort
        poetry run isort --check-only --diff .
    
    - name: Run security check
      run: |
        poetry add --group dev safety
        # Use the new scan command instead of deprecated check
        # Ignore CVE-2024-22513 for djangorestframework-simplejwt as it's a false positive for version 5.5.1
        poetry run safety scan --ignore 66963 || true

  test:
    name: 🧪 Test
    runs-on: ubuntu-latest
    needs: lint
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_lacrei_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      id: setup-python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1.4.1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    
    - name: Install project
      run: poetry install --no-interaction --no-root
    
    - name: Run tests
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_lacrei_db
        SECRET_KEY: test-secret-key-for-ci
        DEBUG: False
      run: |
        poetry run python manage.py test --verbosity=2
    
    - name: Generate coverage report
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_lacrei_db
        SECRET_KEY: test-secret-key-for-ci
        DEBUG: False
      run: |
        poetry add --group dev coverage
        poetry run coverage run --source='.' manage.py test
        poetry run coverage xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    name: 🐳 Build
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository_owner }}/desafio-lacrei
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Deploy to ECS Staging
      run: |
        # Atualizar task definition com nova imagem
        aws ecs update-service \
          --cluster desafio-lacrei-staging \
          --service desafio-lacrei-staging-service \
          --force-new-deployment
    
    - name: Wait for deployment
      run: |
        aws ecs wait services-stable \
          --cluster desafio-lacrei-staging \
          --services desafio-lacrei-staging-service
    
    - name: Run Database Migrations
      run: |
        # Verificar se a task definition de migração existe
        if aws ecs describe-task-definition --task-definition desafio-lacrei-production-migrate >/dev/null 2>&1; then
          echo "Migration task definition exists, updating..."
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition desafio-lacrei-production-migrate --query taskDefinition)
          NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "${{ needs.build.outputs.image-tag }}" '.containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.placementConstraints) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)')
          aws ecs register-task-definition --cli-input-json "$NEW_TASK_DEFINITION"
        else
          echo "Creating migration task definition..."
          cat > migrate-task-definition.json << EOF
        {
          "family": "desafio-lacrei-production-migrate",
          "networkMode": "awsvpc",
          "requiresCompatibilities": ["FARGATE"],
          "cpu": "256",
          "memory": "512",
          "executionRoleArn": "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecsTaskExecutionRole",
          "taskRoleArn": "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecsTaskRole",
          "containerDefinitions": [
            {
              "name": "desafio-lacrei-migrate",
              "image": "${{ needs.build.outputs.image-tag }}",
              "command": ["python", "manage.py", "migrate"],
              "essential": true,
              "environment": [
                {
                  "name": "DEBUG",
                  "value": "False"
                }
              ],
              "secrets": [
                {
                  "name": "DATABASE_URL",
                  "valueFrom": "arn:aws:ssm:${{ secrets.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:parameter/desafio-lacrei/production/database-url"
                },
                {
                  "name": "SECRET_KEY",
                  "valueFrom": "arn:aws:ssm:${{ secrets.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:parameter/desafio-lacrei/production/secret-key"
                }
              ],
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "/ecs/desafio-lacrei-production-migrate",
                  "awslogs-region": "${{ secrets.AWS_REGION }}",
                  "awslogs-stream-prefix": "ecs"
                }
              }
            }
          ]
        }
        EOF
          aws ecs register-task-definition --cli-input-json file://migrate-task-definition.json
        fi
        
        # Executar task de migração
        TASK_ARN=$(aws ecs run-task 
          --cluster desafio-lacrei-production 
          --task-definition desafio-lacrei-production-migrate 
          --launch-type FARGATE 
          --network-configuration 'awsvpcConfiguration={subnets=[${{ secrets.AWS_SUBNET_1 }},${{ secrets.AWS_SUBNET_2 }}],securityGroups=[${{ secrets.AWS_SECURITY_GROUP }}],assignPublicIp=ENABLED}' 
          --query 'tasks[0].taskArn' --output text)
          
        # Aguardar conclusão da migração
        echo "Aguardando migração concluir..."
        aws ecs wait tasks-stopped --cluster desafio-lacrei-production --tasks $TASK_ARN
        
        # Verificar se a migração foi bem-sucedida
        EXIT_CODE=$(aws ecs describe-tasks --cluster desafio-lacrei-production --tasks $TASK_ARN --query 'tasks[0].containers[0].exitCode')
        if [ "$EXIT_CODE" != "0" ]; then
          echo "Migração falhou com exit code: $EXIT_CODE"
          exit 1
        fi

  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Deploy to ECS Production
      run: |
        # Verificar se a task definition existe
        if aws ecs describe-task-definition --task-definition desafio-lacrei-production >/dev/null 2>&1; then
          echo "Task definition exists, implementing Blue/Green deployment..."
          
          # Blue/Green Deploy - Atualizar task definition existente
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition desafio-lacrei-production --query taskDefinition)
          NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "${{ needs.build.outputs.image-tag }}" '.containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.placementConstraints) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)')
          NEW_TASK_INFO=$(aws ecs register-task-definition --cli-input-json "$NEW_TASK_DEFINITION")
          NEW_REVISION=$(echo $NEW_TASK_INFO | jq -r '.taskDefinition.revision')
          
          # Atualizar serviço com nova task definition
          aws ecs update-service \
            --cluster desafio-lacrei-production \
            --service desafio-lacrei-production-service \
            --task-definition desafio-lacrei-production:$NEW_REVISION
        else
          echo "Task definition doesn't exist, creating initial deployment..."
          
          # Primeira vez - criar task definition base
          cat > task-definition.json << EOF
        {
          "family": "desafio-lacrei-production",
          "networkMode": "awsvpc",
          "requiresCompatibilities": ["FARGATE"],
          "cpu": "512",
          "memory": "1024",
          "executionRoleArn": "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecsTaskExecutionRole",
          "taskRoleArn": "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecsTaskRole",
          "containerDefinitions": [
            {
              "name": "desafio-lacrei-app",
              "image": "${{ needs.build.outputs.image-tag }}",
              "portMappings": [
                {
                  "containerPort": 8000,
                  "protocol": "tcp"
                }
              ],
              "essential": true,
              "environment": [
                {
                  "name": "DEBUG",
                  "value": "False"
                },
                {
                  "name": "ALLOWED_HOSTS",
                  "value": "*"
                }
              ],
              "secrets": [
                {
                  "name": "DATABASE_URL",
                  "valueFrom": "arn:aws:ssm:${{ secrets.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:parameter/desafio-lacrei/production/database-url"
                },
                {
                  "name": "SECRET_KEY",
                  "valueFrom": "arn:aws:ssm:${{ secrets.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:parameter/desafio-lacrei/production/secret-key"
                }
              ],
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "/ecs/desafio-lacrei-production",
                  "awslogs-region": "${{ secrets.AWS_REGION }}",
                  "awslogs-stream-prefix": "ecs"
                }
              }
            }
          ]
        }
        EOF
          
          # Registrar task definition inicial
          aws ecs register-task-definition --cli-input-json file://task-definition.json
          
          # Atualizar ou criar serviço
          if aws ecs describe-services --cluster desafio-lacrei-production --services desafio-lacrei-production-service >/dev/null 2>&1; then
            aws ecs update-service \
              --cluster desafio-lacrei-production \
              --service desafio-lacrei-production-service \
              --task-definition desafio-lacrei-production \
              --force-new-deployment
          else
            echo "Service doesn't exist. Please create the ECS service manually first."
            exit 1
          fi
        fi
    
    - name: Wait for production deployment
      run: |
        aws ecs wait services-stable \
          --cluster desafio-lacrei-production \
          --services desafio-lacrei-production-service
    
    - name: Run production migrations
      run: |
        aws ecs run-task \
          --cluster desafio-lacrei-production \
          --task-definition desafio-lacrei-production-migrate \
          --launch-type FARGATE \
          --network-configuration "awsvpcConfiguration={subnets=[${{ secrets.PRODUCTION_SUBNET_IDS }}],securityGroups=[${{ secrets.PRODUCTION_SECURITY_GROUP_ID }}],assignPublicIp=ENABLED}"
    
    - name: Health check
      run: |
        # Verificar se a aplicação está respondendo corretamente
        for i in {1..10}; do
          if curl -f ${{ secrets.PRODUCTION_URL }}/health/; then
            echo "Health check passed"
            break
          else
            echo "Health check failed, attempt $i/10"
            sleep 30
          fi
        done

  rollback:
    name: 🔄 Rollback
    runs-on: ubuntu-latest
    if: failure() && (needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure')
    needs: [deploy-staging, deploy-production]
    environment: production
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Rollback to previous version
      run: |
        # Obter a task definition anterior
        CURRENT_TASK_DEF=$(aws ecs describe-services --cluster desafio-lacrei-production --services desafio-lacrei-production-service --query 'services[0].taskDefinition' --output text)
        CURRENT_REVISION=$(echo $CURRENT_TASK_DEF | cut -d':' -f2)
        PREVIOUS_REVISION=$((CURRENT_REVISION - 1))
        
        # Reverter para a versão anterior
        aws ecs update-service \
          --cluster desafio-lacrei-production \
          --service desafio-lacrei-production-service \
          --task-definition desafio-lacrei-production:$PREVIOUS_REVISION
        
        # Aguardar estabilização
        aws ecs wait services-stable \
          --cluster desafio-lacrei-production \
          --services desafio-lacrei-production-service
        
        echo "Rollback completed to revision $PREVIOUS_REVISION"
