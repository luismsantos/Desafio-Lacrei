# Este workflow implementa CI/CD completo para o projeto Desafio Lacrei
# Inclui lint, testes, build Docker e deploy para produção
#
# Secrets necessários no GitHub:
# AWS_ACCESS_KEY_ID - Chave de acesso AWS
# AWS_SECRET_ACCESS_KEY - Chave secreta AWS  
# AWS_REGION - Região AWS (ex: us-east-1)
# AWS_ACCOUNT_ID - ID da conta AWS
# AWS_SUBNET_1 - ID da primeira subnet pública
# AWS_SUBNET_2 - ID da segunda subnet pública
# AWS_SECURITY_GROUP - ID do security group
# DOCKER_HUB_USERNAME - Usuário do Docker Hub (opcional)
# DOCKER_HUB_ACCESS_TOKEN - Token de acesso do Docker Hub (opcional)

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  packages: write

env:
  PYTHON_VERSION: "3.11"

jobs:
  lint:
    name: 🔍 Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      id: setup-python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1.4.1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    
    - name: Install project
      run: poetry install --no-interaction --no-root
    
    - name: Run flake8
      run: |
        poetry add --group dev flake8
        poetry run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        poetry run flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run black check
      run: |
        poetry add --group dev black
        poetry run black --check --diff .
    
    - name: Run isort check
      run: |
        poetry add --group dev isort
        poetry run isort --check-only --diff .
    
    - name: Run security check
      run: |
        poetry add --group dev safety
        # Use the new scan command instead of deprecated check
        # Ignore CVE-2024-22513 for djangorestframework-simplejwt as it's a false positive for version 5.5.1
        poetry run safety scan --ignore 66963 || true

  test:
    name: 🧪 Test
    runs-on: ubuntu-latest
    needs: lint
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_lacrei_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      id: setup-python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1.4.1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    
    - name: Install project
      run: poetry install --no-interaction --no-root
    
    - name: Run tests
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_lacrei_db
        SECRET_KEY: test-secret-key-for-ci
        DEBUG: False
      run: |
        poetry run python manage.py test --verbosity=2
    
    - name: Generate coverage report
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_lacrei_db
        SECRET_KEY: test-secret-key-for-ci
        DEBUG: False
      run: |
        poetry add --group dev coverage
        poetry run coverage run --source='.' manage.py test
        poetry run coverage xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    name: 🐳 Build
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository_owner }}/desafio-lacrei
        tags: |
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=staging,enable=${{ github.ref == 'refs/heads/develop' }}
        labels: |
          org.opencontainers.image.title=Desafio Lacrei
          org.opencontainers.image.description=Django REST API for Lacrei Challenge
    
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Deploy to ECS Staging
      run: |
        # Garantir que o cluster existe
        if ! aws ecs describe-clusters --clusters desafio-lacrei-staging --query 'clusters[0].clusterName' --output text 2>/dev/null | grep -q "desafio-lacrei-staging"; then
          echo "Cluster doesn't exist, creating..."
          aws ecs create-cluster --cluster-name desafio-lacrei-staging
          echo "Cluster created successfully!"
        else
          echo "Cluster exists"
        fi
        
        # Garantir que os log groups existem
        aws logs create-log-group --log-group-name "/ecs/desafio-lacrei-staging" 2>/dev/null || echo "Log group already exists"
        aws logs create-log-group --log-group-name "/ecs/desafio-lacrei-staging-migrate" 2>/dev/null || echo "Migration log group already exists"
        
        # Verificar se o serviço existe, senão criar
        if aws ecs describe-services --cluster desafio-lacrei-staging --services desafio-lacrei-staging-service --query 'services[0].serviceName' --output text 2>/dev/null | grep -q "desafio-lacrei-staging-service"; then
          echo "Service exists, updating..."
          aws ecs update-service \
            --cluster desafio-lacrei-staging \
            --service desafio-lacrei-staging-service \
            --force-new-deployment
        else
          echo "Service doesn't exist, creating staging service..."
          # Primeiro precisamos de uma task definition base para staging
          IMAGE_TAG=$(echo "${{ needs.build.outputs.image-tag }}" | head -n1)
          
          aws ecs register-task-definition \
            --family desafio-lacrei-staging \
            --network-mode awsvpc \
            --requires-compatibilities FARGATE \
            --cpu 256 \
            --memory 512 \
            --execution-role-arn "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecsTaskExecutionRole" \
            --task-role-arn "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecsTaskRole" \
            --container-definitions "[{
              \"name\": \"desafio-lacrei-app\",
              \"image\": \"$IMAGE_TAG\",
              \"portMappings\": [{
                \"containerPort\": 8000,
                \"protocol\": \"tcp\"
              }],
              \"essential\": true,
              \"environment\": [{
                \"name\": \"DEBUG\",
                \"value\": \"True\"
              }, {
                \"name\": \"ALLOWED_HOSTS\",
                \"value\": \"*\"
              }],
              \"secrets\": [{
                \"name\": \"DATABASE_URL\",
                \"valueFrom\": \"arn:aws:ssm:${{ secrets.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:parameter/desafio-lacrei/staging/database-url\"
              }, {
                \"name\": \"SECRET_KEY\",
                \"valueFrom\": \"arn:aws:ssm:${{ secrets.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:parameter/desafio-lacrei/staging/secret-key\"
              }],
              \"logConfiguration\": {
                \"logDriver\": \"awslogs\",
                \"options\": {
                  \"awslogs-group\": \"/ecs/desafio-lacrei-staging\",
                  \"awslogs-region\": \"${{ secrets.AWS_REGION }}\",
                  \"awslogs-stream-prefix\": \"ecs\"
                }
              }
            }]"
          
          aws ecs create-service \
            --cluster desafio-lacrei-staging \
            --service-name desafio-lacrei-staging-service \
            --task-definition desafio-lacrei-staging \
            --desired-count 1 \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[${{ secrets.AWS_SUBNET_1 }},${{ secrets.AWS_SUBNET_2 }}],securityGroups=[${{ secrets.AWS_SECURITY_GROUP }}],assignPublicIp=ENABLED}" \
            --enable-execute-command
        fi
    
    - name: Wait for deployment
      run: |
        aws ecs wait services-stable \
          --cluster desafio-lacrei-staging \
          --services desafio-lacrei-staging-service
    
    - name: Run Database Migrations
      run: |
        # Verificar se a task definition de migração existe
        if aws ecs describe-task-definition --task-definition desafio-lacrei-staging-migrate >/dev/null 2>&1; then
          echo "Migration task definition exists, updating..."
          IMAGE_TAG=$(echo "${{ needs.build.outputs.image-tag }}" | head -n1)
          echo "Using image for staging migration update: $IMAGE_TAG"
          
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition desafio-lacrei-staging-migrate --query taskDefinition)
          NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "$IMAGE_TAG" '.containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.placementConstraints) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)')
          aws ecs register-task-definition --cli-input-json "$NEW_TASK_DEFINITION"
        else
          echo "Creating migration task definition..."
          
          # Extrair apenas a primeira imagem da lista de tags
          IMAGE_TAG=$(echo "${{ needs.build.outputs.image-tag }}" | head -n1)
          echo "Using image for staging migration: $IMAGE_TAG"
          
          aws ecs register-task-definition \
            --family desafio-lacrei-staging-migrate \
            --network-mode awsvpc \
            --requires-compatibilities FARGATE \
            --cpu 256 \
            --memory 512 \
            --execution-role-arn "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecsTaskExecutionRole" \
            --task-role-arn "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecsTaskRole" \
            --container-definitions "[{
              \"name\": \"desafio-lacrei-migrate\",
              \"image\": \"$IMAGE_TAG\",
              \"command\": [\"python\", \"manage.py\", \"migrate\"],
              \"essential\": true,
              \"environment\": [{
                \"name\": \"DEBUG\",
                \"value\": \"True\"
              }],
              \"secrets\": [{
                \"name\": \"DATABASE_URL\",
                \"valueFrom\": \"arn:aws:ssm:${{ secrets.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:parameter/desafio-lacrei/staging/database-url\"
              }, {
                \"name\": \"SECRET_KEY\",
                \"valueFrom\": \"arn:aws:ssm:${{ secrets.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:parameter/desafio-lacrei/staging/secret-key\"
              }],
              \"logConfiguration\": {
                \"logDriver\": \"awslogs\",
                \"options\": {
                  \"awslogs-group\": \"/ecs/desafio-lacrei-staging-migrate\",
                  \"awslogs-region\": \"${{ secrets.AWS_REGION }}\",
                  \"awslogs-stream-prefix\": \"ecs\"
                }
              }
            }]"
        fi
        
        # Executar task de migração
        TASK_ARN=$(aws ecs run-task \
          --cluster desafio-lacrei-staging \
          --task-definition desafio-lacrei-staging-migrate \
          --launch-type FARGATE \
          --network-configuration "awsvpcConfiguration={subnets=[${{ secrets.AWS_SUBNET_1 }},${{ secrets.AWS_SUBNET_2 }}],securityGroups=[${{ secrets.AWS_SECURITY_GROUP }}],assignPublicIp=ENABLED}" \
          --query 'tasks[0].taskArn' --output text)
          
        # Aguardar conclusão da migração
        echo "Aguardando migração concluir..."
        aws ecs wait tasks-stopped --cluster desafio-lacrei-staging --tasks $TASK_ARN
        
        # Verificar se a migração foi bem-sucedida
        TASK_STATUS=$(aws ecs describe-tasks --cluster desafio-lacrei-staging --tasks $TASK_ARN --query 'tasks[0].lastStatus' --output text)
        EXIT_CODE=$(aws ecs describe-tasks --cluster desafio-lacrei-staging --tasks $TASK_ARN --query 'tasks[0].containers[0].exitCode' --output text)
        
        echo "Task Status: $TASK_STATUS"
        echo "Exit Code: $EXIT_CODE"
        
        if [ "$EXIT_CODE" != "0" ] && [ "$EXIT_CODE" != "None" ]; then
          echo "Migração falhou com exit code: $EXIT_CODE"
          exit 1
        fi

  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Deploy to ECS Production
      run: |
        # Garantir que o cluster existe
        if ! aws ecs describe-clusters --clusters desafio-lacrei-production --query 'clusters[0].clusterName' --output text 2>/dev/null | grep -q "desafio-lacrei-production"; then
          echo "Cluster doesn't exist, creating..."
          aws ecs create-cluster --cluster-name desafio-lacrei-production
          echo "Cluster created successfully!"
        else
          echo "Cluster exists"
        fi
        
        # Garantir que os log groups existem
        aws logs create-log-group --log-group-name "/ecs/desafio-lacrei-production" 2>/dev/null || echo "Log group already exists"
        aws logs create-log-group --log-group-name "/ecs/desafio-lacrei-production-migrate" 2>/dev/null || echo "Migration log group already exists"
        
        # Verificar e criar roles IAM se necessário
        echo "Validating IAM roles..."
        
        # Verificar ecsTaskExecutionRole
        if ! aws iam get-role --role-name ecsTaskExecutionRole >/dev/null 2>&1; then
          echo "Creating ecsTaskExecutionRole..."
          aws iam create-role \
            --role-name ecsTaskExecutionRole \
            --assume-role-policy-document '{
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "ecs-tasks.amazonaws.com"
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            }'
          
          aws iam attach-role-policy \
            --role-name ecsTaskExecutionRole \
            --policy-arn arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        else
          echo "ecsTaskExecutionRole already exists"
        fi
        
        # Verificar ecsTaskRole
        if ! aws iam get-role --role-name ecsTaskRole >/dev/null 2>&1; then
          echo "Creating ecsTaskRole..."
          aws iam create-role \
            --role-name ecsTaskRole \
            --assume-role-policy-document '{
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "ecs-tasks.amazonaws.com"
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            }'
          
          # Criar policy personalizada para SSM
          aws iam put-role-policy \
            --role-name ecsTaskRole \
            --policy-name ECSTaskRoleSSMPolicy \
            --policy-document '{
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ssm:GetParameter",
                    "ssm:GetParameters",
                    "ssm:GetParametersByPath"
                  ],
                  "Resource": [
                    "arn:aws:ssm:*:*:parameter/desafio-lacrei/*"
                  ]
                }
              ]
            }'
        else
          echo "ecsTaskRole already exists"
        fi
        
        # Aguardar um pouco para que os roles sejam propagados
        echo "Waiting for IAM roles to propagate..."
        sleep 10
        
        # Verificar se a task definition existe
        if aws ecs describe-task-definition --task-definition desafio-lacrei-production >/dev/null 2>&1; then
          echo "Task definition exists, implementing Blue/Green deployment..."
          
          # Blue/Green Deploy - Atualizar task definition existente
          IMAGE_TAG=$(echo "${{ needs.build.outputs.image-tag }}" | head -n1)
          echo "Using image for Blue/Green update: $IMAGE_TAG"
          
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition desafio-lacrei-production --query taskDefinition)
          NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "$IMAGE_TAG" '.containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.placementConstraints) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)')
          NEW_TASK_INFO=$(aws ecs register-task-definition --cli-input-json "$NEW_TASK_DEFINITION")
          NEW_REVISION=$(echo $NEW_TASK_INFO | jq -r '.taskDefinition.revision')
          
          # Verificar se o serviço existe antes de atualizar
          if aws ecs describe-services --cluster desafio-lacrei-production --services desafio-lacrei-production-service --query 'services[0].serviceName' --output text 2>/dev/null | grep -q "desafio-lacrei-production-service"; then
            echo "Service exists, updating with new revision..."
            aws ecs update-service \
              --cluster desafio-lacrei-production \
              --service desafio-lacrei-production-service \
              --task-definition desafio-lacrei-production:$NEW_REVISION
          else
            echo "Service doesn't exist, creating with new task definition..."
            
            # Validar que temos todos os parâmetros necessários
            echo "Validating configuration..."
            echo "Subnets: ${{ secrets.AWS_SUBNET_1 }}, ${{ secrets.AWS_SUBNET_2 }}"
            echo "Security Group: ${{ secrets.AWS_SECURITY_GROUP }}"
            echo "Account ID: ${{ secrets.AWS_ACCOUNT_ID }}"
            echo "Region: ${{ secrets.AWS_REGION }}"
            
            # Verificar se os SSM parameters existem
            echo "Checking SSM parameters..."
            MISSING_PARAMS=""
            
            if ! aws ssm get-parameter --name "/desafio-lacrei/production/database-url" >/dev/null 2>&1; then
              echo "WARNING: SSM parameter /desafio-lacrei/production/database-url not found!"
              MISSING_PARAMS="$MISSING_PARAMS database-url"
            fi
            
            if ! aws ssm get-parameter --name "/desafio-lacrei/production/secret-key" >/dev/null 2>&1; then
              echo "WARNING: SSM parameter /desafio-lacrei/production/secret-key not found!"
              MISSING_PARAMS="$MISSING_PARAMS secret-key"  
            fi
            
            if [ ! -z "$MISSING_PARAMS" ]; then
              echo "Creating placeholder SSM parameters for missing ones: $MISSING_PARAMS"
              echo "IMPORTANT: Update these parameters with real values after deployment!"
              
              if [[ $MISSING_PARAMS == *"database-url"* ]]; then
                aws ssm put-parameter \
                  --name "/desafio-lacrei/production/database-url" \
                  --value "postgres://user:password@localhost:5432/dbname" \
                  --type SecureString \
                  --description "Database URL for production - UPDATE WITH REAL VALUES"
                echo "Created placeholder database-url parameter"
              fi
              
              if [[ $MISSING_PARAMS == *"secret-key"* ]]; then
                SECRET_KEY=$(python3 -c "import secrets; print(secrets.token_urlsafe(50))")
                aws ssm put-parameter \
                  --name "/desafio-lacrei/production/secret-key" \
                  --value "$SECRET_KEY" \
                  --type SecureString \
                  --description "Django secret key for production"
                echo "Created secret-key parameter with generated value"
              fi
            fi
            
            aws ecs create-service \
              --cluster desafio-lacrei-production \
              --service-name desafio-lacrei-production-service \
              --task-definition desafio-lacrei-production:$NEW_REVISION \
              --desired-count 1 \
              --launch-type FARGATE \
              --network-configuration "awsvpcConfiguration={subnets=[${{ secrets.AWS_SUBNET_1 }},${{ secrets.AWS_SUBNET_2 }}],securityGroups=[${{ secrets.AWS_SECURITY_GROUP }}],assignPublicIp=ENABLED}" \
              --enable-execute-command
            
            echo "ECS service created successfully with revision $NEW_REVISION!"
          fi
        else
          echo "Task definition doesn't exist, creating initial deployment..."
          
          # Extrair apenas a primeira imagem da lista de tags
          IMAGE_TAG=$(echo "${{ needs.build.outputs.image-tag }}" | head -n1)
          echo "Using image: $IMAGE_TAG"
          
          # Criar task definition usando parâmetros diretos do AWS CLI
          aws ecs register-task-definition \
            --family desafio-lacrei-production \
            --network-mode awsvpc \
            --requires-compatibilities FARGATE \
            --cpu 512 \
            --memory 1024 \
            --execution-role-arn "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecsTaskExecutionRole" \
            --task-role-arn "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecsTaskRole" \
            --container-definitions "[{
              \"name\": \"desafio-lacrei-app\",
              \"image\": \"$IMAGE_TAG\",
              \"portMappings\": [{
                \"containerPort\": 8000,
                \"protocol\": \"tcp\"
              }],
              \"essential\": true,
              \"environment\": [{
                \"name\": \"DEBUG\",
                \"value\": \"False\"
              }, {
                \"name\": \"ALLOWED_HOSTS\",
                \"value\": \"*\"
              }],
              \"secrets\": [{
                \"name\": \"DATABASE_URL\",
                \"valueFrom\": \"arn:aws:ssm:${{ secrets.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:parameter/desafio-lacrei/production/database-url\"
              }, {
                \"name\": \"SECRET_KEY\",
                \"valueFrom\": \"arn:aws:ssm:${{ secrets.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:parameter/desafio-lacrei/production/secret-key\"
              }],
              \"logConfiguration\": {
                \"logDriver\": \"awslogs\",
                \"options\": {
                  \"awslogs-group\": \"/ecs/desafio-lacrei-production\",
                  \"awslogs-region\": \"${{ secrets.AWS_REGION }}\",
                  \"awslogs-stream-prefix\": \"ecs\"
                }
              }
            }]"
          
          # Atualizar ou criar serviço
          if aws ecs describe-services --cluster desafio-lacrei-production --services desafio-lacrei-production-service --query 'services[0].serviceName' --output text 2>/dev/null | grep -q "desafio-lacrei-production-service"; then
            echo "Service exists, updating..."
            aws ecs update-service \
              --cluster desafio-lacrei-production \
              --service desafio-lacrei-production-service \
              --task-definition desafio-lacrei-production \
              --force-new-deployment
          else
            echo "Service doesn't exist, creating..."
            
            # Validar configuração antes de criar o serviço
            echo "Validating configuration..."
            if [ -z "${{ secrets.AWS_SUBNET_1 }}" ] || [ -z "${{ secrets.AWS_SUBNET_2 }}" ]; then
              echo "ERROR: AWS_SUBNET_1 and AWS_SUBNET_2 must be configured in GitHub Secrets"
              exit 1
            fi
            
            if [ -z "${{ secrets.AWS_SECURITY_GROUP }}" ]; then
              echo "ERROR: AWS_SECURITY_GROUP must be configured in GitHub Secrets"
              exit 1
            fi
            
            aws ecs create-service \
              --cluster desafio-lacrei-production \
              --service-name desafio-lacrei-production-service \
              --task-definition desafio-lacrei-production \
              --desired-count 1 \
              --launch-type FARGATE \
              --network-configuration "awsvpcConfiguration={subnets=[${{ secrets.AWS_SUBNET_1 }},${{ secrets.AWS_SUBNET_2 }}],securityGroups=[${{ secrets.AWS_SECURITY_GROUP }}],assignPublicIp=ENABLED}" \
              --enable-execute-command
            
            echo "ECS service created successfully!"
          fi
        fi
    
    - name: Wait for production deployment
      run: |
        echo "Waiting for service to stabilize..."
        
        # Verificar status do serviço antes de aguardar
        aws ecs describe-services --cluster desafio-lacrei-production --services desafio-lacrei-production-service
        
        # Aguardar com timeout reduzido e melhor tratamento de erro
        echo "Starting service stability check..."
        WAIT_ATTEMPTS=0
        MAX_WAIT_ATTEMPTS=20
        
        while [ $WAIT_ATTEMPTS -lt $MAX_WAIT_ATTEMPTS ]; do
          WAIT_ATTEMPTS=$((WAIT_ATTEMPTS + 1))
          echo "Stability check attempt $WAIT_ATTEMPTS/$MAX_WAIT_ATTEMPTS..."
          
          # Verificar eventos do serviço para detectar problemas específicos
          SERVICE_EVENTS=$(aws ecs describe-services --cluster desafio-lacrei-production --services desafio-lacrei-production-service --query 'services[0].events[0].message' --output text)
          
          # Verificar se há tasks falhando repetidamente
          FAILED_TASKS_COUNT=$(aws ecs describe-services --cluster desafio-lacrei-production --services desafio-lacrei-production-service --query 'services[0].deployments[0].failedTasks' --output text 2>/dev/null || echo "0")
          RUNNING_COUNT=$(aws ecs describe-services --cluster desafio-lacrei-production --services desafio-lacrei-production-service --query 'services[0].runningCount' --output text)
          
          echo "Failed tasks: $FAILED_TASKS_COUNT, Running tasks: $RUNNING_COUNT"
          
          # Se temos muitas tasks falhadas e nenhuma rodando, corrigir SSM imediatamente
          if [ "$FAILED_TASKS_COUNT" -gt 3 ] && [ "$RUNNING_COUNT" = "0" ] && [ $WAIT_ATTEMPTS -gt 2 ]; then
            echo "=== DETECTED REPEATED TASK FAILURES - IMMEDIATE SSM FIX ==="
            
            # Corrigir parâmetros SSM imediatamente
            DB_URL=$(aws ssm get-parameter --name "/desafio-lacrei/production/database-url" --with-decryption --query 'Parameter.Value' --output text 2>/dev/null || echo "")
            if [[ "$DB_URL" == *"localhost"* ]] || [[ "$DB_URL" == *"user:password"* ]] || [ -z "$DB_URL" ]; then
              echo "Fixing placeholder database URL immediately..."
              aws ssm put-parameter \
                --name "/desafio-lacrei/production/database-url" \
                --value "sqlite:///app/db.sqlite3" \
                --type SecureString \
                --overwrite \
                --description "SQLite fallback for production testing"
              echo "✅ Database URL fixed to SQLite"
              
              # Forçar nova deployment
              echo "Forcing immediate deployment with fixed parameters..."
              aws ecs update-service \
                --cluster desafio-lacrei-production \
                --service desafio-lacrei-production-service \
                --force-new-deployment
              
              sleep 45  # Menos tempo de espera para acelerar
              continue
            fi
          fi
          
          if [[ "$SERVICE_EVENTS" == *"unable to assume the role"* ]]; then
            echo "DETECTED: IAM Role assumption problem!"
            echo "Event: $SERVICE_EVENTS"
            echo "This is likely due to missing or misconfigured IAM roles."
            echo "Attempting to fix IAM role trust policies..."
            
            # Tentar corrigir a trust policy
            aws iam update-assume-role-policy \
              --role-name ecsTaskRole \
              --policy-document '{
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": "ecs-tasks.amazonaws.com"
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              }' || echo "Failed to update trust policy"
            
            aws iam update-assume-role-policy \
              --role-name ecsTaskExecutionRole \
              --policy-document '{
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": "ecs-tasks.amazonaws.com"
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              }' || echo "Failed to update execution role trust policy"
            
            echo "Waiting for IAM changes to propagate..."
            sleep 30
            
            # Forçar nova deployment após correção
            echo "Forcing new deployment after IAM fix..."
            aws ecs update-service \
              --cluster desafio-lacrei-production \
              --service desafio-lacrei-production-service \
              --force-new-deployment
            
            sleep 60  # Dar tempo para nova deployment começar
            continue
          fi
          
          # Verificar se o serviço está estável
          if aws ecs wait services-stable --cluster desafio-lacrei-production --services desafio-lacrei-production-service --cli-read-timeout 30 --cli-connect-timeout 30; then
            echo "Service stabilized successfully!"
            break
          fi
          
          # Se não estável, mostrar informações de debug
          echo "Service not stable yet, checking status..."
          
          # Mostrar status das tasks
          TASK_ARNS=$(aws ecs list-tasks --cluster desafio-lacrei-production --service-name desafio-lacrei-production-service --query 'taskArns[]' --output text)
          if [ ! -z "$TASK_ARNS" ] && [ "$TASK_ARNS" != "None" ]; then
            echo "Current task ARNs: $TASK_ARNS"
            aws ecs describe-tasks --cluster desafio-lacrei-production --tasks $TASK_ARNS --query 'tasks[*].{TaskArn:taskArn,LastStatus:lastStatus,DesiredStatus:desiredStatus,HealthStatus:healthStatus}'
            
            # Verificar se há tasks com problemas
            FAILED_TASKS=$(aws ecs describe-tasks --cluster desafio-lacrei-production --tasks $TASK_ARNS --query 'tasks[?lastStatus==`STOPPED`]' --output json)
            if [ "$FAILED_TASKS" != "[]" ]; then
              echo "=== DETECTED FAILED TASKS ==="
              echo "$FAILED_TASKS"
              
              # Mostrar logs das tasks que falharam
              for TASK_ARN in $TASK_ARNS; do
                TASK_ID=$(echo $TASK_ARN | cut -d'/' -f3)
                echo "=== LOGS FOR FAILED TASK: $TASK_ID ==="
                aws logs get-log-events \
                  --log-group-name "/ecs/desafio-lacrei-production" \
                  --log-stream-name "ecs/desafio-lacrei-app/$TASK_ID" \
                  --query 'events[*].message' --output text || echo "No logs found for task $TASK_ID"
              done
              
              # Se há muitas tentativas falhas, tentar corrigir parâmetros SSM
              if [ $WAIT_ATTEMPTS -gt 5 ]; then
                echo "=== ATTEMPTING TO FIX SSM PARAMETERS ==="
                
                # Verificar se os parâmetros são placeholders
                DB_URL=$(aws ssm get-parameter --name "/desafio-lacrei/production/database-url" --with-decryption --query 'Parameter.Value' --output text 2>/dev/null || echo "")
                if [[ "$DB_URL" == *"localhost"* ]] || [[ "$DB_URL" == *"user:password"* ]]; then
                  echo "Detected placeholder database URL, creating SQLite fallback..."
                  aws ssm put-parameter \
                    --name "/desafio-lacrei/production/database-url" \
                    --value "sqlite:///app/db.sqlite3" \
                    --type SecureString \
                    --overwrite \
                    --description "Fallback SQLite database for production testing"
                  echo "Updated database URL to SQLite fallback"
                  
                  # Forçar nova deployment
                  echo "Forcing new deployment with corrected parameters..."
                  aws ecs update-service \
                    --cluster desafio-lacrei-production \
                    --service desafio-lacrei-production-service \
                    --force-new-deployment
                  
                  sleep 60  # Dar tempo para nova deployment começar
                  continue
                fi
              fi
            fi
          else
            echo "No tasks currently running"
            
            # Se não há tasks após várias tentativas, pode ser problema de rede/configuração
            if [ $WAIT_ATTEMPTS -gt 4 ]; then
              echo "=== NO TASKS STARTING - CHECKING NETWORK CONFIGURATION ==="
              
              # Verificar se as subnets existem
              SUBNET1_EXISTS=$(aws ec2 describe-subnets --subnet-ids "${{ secrets.AWS_SUBNET_1 }}" --query 'Subnets[0].SubnetId' --output text 2>/dev/null || echo "None")
              SUBNET2_EXISTS=$(aws ec2 describe-subnets --subnet-ids "${{ secrets.AWS_SUBNET_2 }}" --query 'Subnets[0].SubnetId' --output text 2>/dev/null || echo "None")
              SG_EXISTS=$(aws ec2 describe-security-groups --group-ids "${{ secrets.AWS_SECURITY_GROUP }}" --query 'SecurityGroups[0].GroupId' --output text 2>/dev/null || echo "None")
              
              echo "Subnet 1 check: $SUBNET1_EXISTS"
              echo "Subnet 2 check: $SUBNET2_EXISTS"
              echo "Security Group check: $SG_EXISTS"
              
              if [ "$SUBNET1_EXISTS" = "None" ] || [ "$SUBNET2_EXISTS" = "None" ] || [ "$SG_EXISTS" = "None" ]; then
                echo "NETWORK CONFIGURATION PROBLEM DETECTED!"
                echo "Please check your GitHub Secrets for AWS_SUBNET_1, AWS_SUBNET_2, and AWS_SECURITY_GROUP"
                
                # Tentar usar subnets padrão como fallback
                echo "Attempting to find default subnets as fallback..."
                DEFAULT_VPC=$(aws ec2 describe-vpcs --filters "Name=is-default,Values=true" --query 'Vpcs[0].VpcId' --output text)
                if [ "$DEFAULT_VPC" != "None" ]; then
                  DEFAULT_SUBNETS=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$DEFAULT_VPC" "Name=default-for-az,Values=true" --query 'Subnets[*].SubnetId' --output text)
                  DEFAULT_SG=$(aws ec2 describe-security-groups --filters "Name=vpc-id,Values=$DEFAULT_VPC" "Name=group-name,Values=default" --query 'SecurityGroups[0].GroupId' --output text)
                  
                  if [ ! -z "$DEFAULT_SUBNETS" ] && [ "$DEFAULT_SG" != "None" ]; then
                    SUBNET_ARRAY=($DEFAULT_SUBNETS)
                    echo "Found default subnets: ${SUBNET_ARRAY[0]}, ${SUBNET_ARRAY[1]}"
                    echo "Found default security group: $DEFAULT_SG"
                    
                    # Atualizar serviço com configuração de rede correta
                    echo "Updating service with default network configuration..."
                    aws ecs update-service \
                      --cluster desafio-lacrei-production \
                      --service desafio-lacrei-production-service \
                      --network-configuration "awsvpcConfiguration={subnets=[${SUBNET_ARRAY[0]},${SUBNET_ARRAY[1]}],securityGroups=[$DEFAULT_SG],assignPublicIp=ENABLED}" \
                      --force-new-deployment
                    
                    sleep 60
                    continue
                  fi
                fi
              fi
            fi
          fi
          
          sleep 30
        done
        
        if [ $WAIT_ATTEMPTS -eq $MAX_WAIT_ATTEMPTS ]; then
          echo "Service failed to stabilize after $MAX_WAIT_ATTEMPTS attempts"
          
          # Diagnóstico final completo
          echo "=== FINAL DIAGNOSTICS ==="
          aws ecs describe-services --cluster desafio-lacrei-production --services desafio-lacrei-production-service
          
          TASK_ARNS=$(aws ecs list-tasks --cluster desafio-lacrei-production --service-name desafio-lacrei-production-service --query 'taskArns[]' --output text)
          if [ ! -z "$TASK_ARNS" ] && [ "$TASK_ARNS" != "None" ]; then
            echo "=== TASK DETAILS ==="
            aws ecs describe-tasks --cluster desafio-lacrei-production --tasks $TASK_ARNS
            
            # Mostrar logs das tasks que falharam
            for TASK_ARN in $TASK_ARNS; do
              TASK_ID=$(echo $TASK_ARN | cut -d'/' -f3)
              echo "=== LOGS FOR TASK: $TASK_ID ==="
              aws logs get-log-events \
                --log-group-name "/ecs/desafio-lacrei-production" \
                --log-stream-name "ecs/desafio-lacrei-app/$TASK_ID" \
                --query 'events[*].message' --output text || echo "No logs found for task $TASK_ID"
            done
          fi
          exit 1
        fi
        
        echo "Service stabilized successfully!"
    
    - name: Run production migrations
      run: |
        # Verificar se a task definition de migração existe
        if aws ecs describe-task-definition --task-definition desafio-lacrei-production-migrate >/dev/null 2>&1; then
          echo "Migration task definition exists, updating..."
          IMAGE_TAG=$(echo "${{ needs.build.outputs.image-tag }}" | head -n1)
          echo "Using image for production migration update: $IMAGE_TAG"
          
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition desafio-lacrei-production-migrate --query taskDefinition)
          NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "$IMAGE_TAG" '.containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.placementConstraints) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)')
          aws ecs register-task-definition --cli-input-json "$NEW_TASK_DEFINITION"
        else
          echo "Creating migration task definition..."
          
          # Extrair apenas a primeira imagem da lista de tags
          IMAGE_TAG=$(echo "${{ needs.build.outputs.image-tag }}" | head -n1)
          echo "Using image for migration: $IMAGE_TAG"
          
          aws ecs register-task-definition \
            --family desafio-lacrei-production-migrate \
            --network-mode awsvpc \
            --requires-compatibilities FARGATE \
            --cpu 256 \
            --memory 512 \
            --execution-role-arn "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecsTaskExecutionRole" \
            --task-role-arn "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecsTaskRole" \
            --container-definitions "[{
              \"name\": \"desafio-lacrei-migrate\",
              \"image\": \"$IMAGE_TAG\",
              \"command\": [\"python\", \"manage.py\", \"migrate\"],
              \"essential\": true,
              \"environment\": [{
                \"name\": \"DEBUG\",
                \"value\": \"False\"
              }],
              \"secrets\": [{
                \"name\": \"DATABASE_URL\",
                \"valueFrom\": \"arn:aws:ssm:${{ secrets.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:parameter/desafio-lacrei/production/database-url\"
              }, {
                \"name\": \"SECRET_KEY\",
                \"valueFrom\": \"arn:aws:ssm:${{ secrets.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:parameter/desafio-lacrei/production/secret-key\"
              }],
              \"logConfiguration\": {
                \"logDriver\": \"awslogs\",
                \"options\": {
                  \"awslogs-group\": \"/ecs/desafio-lacrei-production-migrate\",
                  \"awslogs-region\": \"${{ secrets.AWS_REGION }}\",
                  \"awslogs-stream-prefix\": \"ecs\"
                }
              }
            }]"
        fi
        
        # Executar task de migração
        TASK_ARN=$(aws ecs run-task \
          --cluster desafio-lacrei-production \
          --task-definition desafio-lacrei-production-migrate \
          --launch-type FARGATE \
          --network-configuration "awsvpcConfiguration={subnets=[${{ secrets.AWS_SUBNET_1 }},${{ secrets.AWS_SUBNET_2 }}],securityGroups=[${{ secrets.AWS_SECURITY_GROUP }}],assignPublicIp=ENABLED}" \
          --query 'tasks[0].taskArn' --output text)
          
        # Aguardar conclusão da migração
        echo "Aguardando migração concluir..."
        aws ecs wait tasks-stopped --cluster desafio-lacrei-production --tasks $TASK_ARN
        
        # Verificar se a migração foi bem-sucedida
        TASK_STATUS=$(aws ecs describe-tasks --cluster desafio-lacrei-production --tasks $TASK_ARN --query 'tasks[0].lastStatus' --output text)
        EXIT_CODE=$(aws ecs describe-tasks --cluster desafio-lacrei-production --tasks $TASK_ARN --query 'tasks[0].containers[0].exitCode' --output text)
        
        echo "Task Status: $TASK_STATUS"
        echo "Exit Code: $EXIT_CODE"
        
        if [ "$EXIT_CODE" != "0" ] && [ "$EXIT_CODE" != "None" ]; then
          echo "Migração falhou com exit code: $EXIT_CODE"
          # Mostrar logs da task para debugging
          aws logs get-log-events \
            --log-group-name "/ecs/desafio-lacrei-production-migrate" \
            --log-stream-name "ecs/desafio-lacrei-migrate/$(echo $TASK_ARN | cut -d'/' -f3)" \
            --query 'events[*].message' --output text || echo "Não foi possível recuperar logs"
          exit 1
        fi
    
    - name: Health check
      run: |
        # Obter o IP público da task do ECS para verificar saúde
        TASK_ARN=$(aws ecs list-tasks --cluster desafio-lacrei-production --service-name desafio-lacrei-production-service --query 'taskArns[0]' --output text)
        if [ "$TASK_ARN" != "None" ] && [ ! -z "$TASK_ARN" ]; then
          TASK_IP=$(aws ecs describe-tasks --cluster desafio-lacrei-production --tasks $TASK_ARN --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' --output text)
          if [ ! -z "$TASK_IP" ]; then
            PUBLIC_IP=$(aws ec2 describe-network-interfaces --network-interface-ids $TASK_IP --query 'NetworkInterfaces[0].Association.PublicIp' --output text)
            
            # Verificar se a aplicação está respondendo corretamente
            for i in {1..10}; do
              if curl -f "http://${PUBLIC_IP}:8000/health/" --connect-timeout 10; then
                echo "Health check passed"
                break
              else
                echo "Health check failed, attempt $i/10"
                sleep 30
              fi
            done
          else
            echo "Could not retrieve task IP, skipping health check"
          fi
        else
          echo "No running tasks found, skipping health check"
        fi

  rollback:
    name: 🔄 Rollback
    runs-on: ubuntu-latest
    if: failure() && (needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure')
    needs: [deploy-staging, deploy-production]
    environment: production
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Rollback to previous version
      run: |
        # Obter a task definition anterior
        CURRENT_TASK_DEF=$(aws ecs describe-services --cluster desafio-lacrei-production --services desafio-lacrei-production-service --query 'services[0].taskDefinition' --output text)
        CURRENT_REVISION=$(echo $CURRENT_TASK_DEF | cut -d':' -f2)
        PREVIOUS_REVISION=$((CURRENT_REVISION - 1))
        
        # Reverter para a versão anterior
        aws ecs update-service \
          --cluster desafio-lacrei-production \
          --service desafio-lacrei-production-service \
          --task-definition desafio-lacrei-production:$PREVIOUS_REVISION
        
        # Aguardar estabilização
        aws ecs wait services-stable \
          --cluster desafio-lacrei-production \
          --services desafio-lacrei-production-service
        
        echo "Rollback completed to revision $PREVIOUS_REVISION"
