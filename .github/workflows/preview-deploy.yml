name: Preview Deploy

on:
  pull_request:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '*.md'

permissions:
  contents: read
  packages: write
  pull-requests: write

jobs:
  preview-deploy:
    name: üîç Preview Deploy
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    environment:
      name: preview-pr-${{ github.event.number }}
      url: https://pr-${{ github.event.number }}.desafio-lacrei.preview.aws.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push preview image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ghcr.io/${{ github.repository_owner }}/desafio-lacrei:pr-${{ github.event.number }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Deploy preview environment
      run: |
        # Criar um ambiente de preview √∫nico para este PR
        PREVIEW_SERVICE_NAME="desafio-lacrei-preview-pr-${{ github.event.number }}"
        
        # Registrar task definition para preview
        TASK_DEFINITION=$(cat <<EOF
        {
          "family": "$PREVIEW_SERVICE_NAME",
          "networkMode": "awsvpc",
          "requiresAttributes": [
            {
              "name": "com.amazonaws.ecs.capability.docker-remote-api.1.18"
            }
          ],
          "cpu": "256",
          "memory": "512",
          "containerDefinitions": [
            {
              "name": "desafio-lacrei-preview",
              "image": "ghcr.io/${{ github.repository_owner }}/desafio-lacrei:pr-${{ github.event.number }}",
              "portMappings": [
                {
                  "containerPort": 8000,
                  "protocol": "tcp"
                }
              ],
              "environment": [
                {
                  "name": "DEBUG",
                  "value": "False"
                },
                {
                  "name": "DATABASE_URL",
                  "value": "${{ secrets.PREVIEW_DATABASE_URL }}"
                },
                {
                  "name": "SECRET_KEY",
                  "value": "${{ secrets.PREVIEW_SECRET_KEY }}"
                },
                {
                  "name": "ALLOWED_HOSTS",
                  "value": "pr-${{ github.event.number }}.desafio-lacrei.preview.aws.com"
                }
              ],
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "/ecs/desafio-lacrei-preview",
                  "awslogs-region": "${{ secrets.AWS_REGION }}",
                  "awslogs-stream-prefix": "pr-${{ github.event.number }}"
                }
              }
            }
          ]
        }
        EOF
        )
        
        aws ecs register-task-definition --cli-input-json "$TASK_DEFINITION"
        
        # Criar servi√ßo ECS para preview
        aws ecs create-service \
          --cluster desafio-lacrei-preview \
          --service-name "$PREVIEW_SERVICE_NAME" \
          --task-definition "$PREVIEW_SERVICE_NAME" \
          --desired-count 1 \
          --launch-type FARGATE \
          --network-configuration "awsvpcConfiguration={subnets=[${{ secrets.PREVIEW_SUBNET_IDS }}],securityGroups=[${{ secrets.PREVIEW_SECURITY_GROUP_ID }}],assignPublicIp=ENABLED}" \
          --load-balancers "targetGroupArn=${{ secrets.PREVIEW_TARGET_GROUP_ARN }},containerName=desafio-lacrei-preview,containerPort=8000"
        
        # Aguardar servi√ßo ficar est√°vel
        aws ecs wait services-stable \
          --cluster desafio-lacrei-preview \
          --services "$PREVIEW_SERVICE_NAME"
    
    - name: Run smoke tests
      run: |
        PREVIEW_URL="https://pr-${{ github.event.number }}.desafio-lacrei.preview.aws.com"
        
        # Aguardar aplica√ß√£o estar dispon√≠vel
        for i in {1..10}; do
          if curl -f "$PREVIEW_URL/health/" > /dev/null 2>&1; then
            echo "Preview environment is healthy"
            break
          else
            echo "Waiting for preview environment... ($i/10)"
            sleep 30
          fi
        done
        
        # Executar testes b√°sicos
        curl -f "$PREVIEW_URL/swagger/" > /dev/null
        echo "Preview environment deployed successfully at $PREVIEW_URL"
    
    - name: Comment PR with preview URL
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `üöÄ **Preview Deploy criado com sucesso!**
            
            üîó **URL:** https://pr-${{ github.event.number }}.desafio-lacrei.preview.aws.com
            üìö **Swagger:** https://pr-${{ github.event.number }}.desafio-lacrei.preview.aws.com/swagger/
            
            Esta preview ser√° automaticamente removida quando o PR for fechado.`
          })

  cleanup-preview:
    name: üßπ Cleanup Preview
    runs-on: ubuntu-latest
    if: github.event.action == 'closed'
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Remove preview environment
      run: |
        PREVIEW_SERVICE_NAME="desafio-lacrei-preview-pr-${{ github.event.number }}"
        
        # Parar e deletar servi√ßo
        aws ecs update-service \
          --cluster desafio-lacrei-preview \
          --service "$PREVIEW_SERVICE_NAME" \
          --desired-count 0
        
        aws ecs delete-service \
          --cluster desafio-lacrei-preview \
          --service "$PREVIEW_SERVICE_NAME"
        
        # Desregistrar task definition n√£o √© necess√°rio pois n√£o h√° custo
        echo "Preview environment cleaned up"
